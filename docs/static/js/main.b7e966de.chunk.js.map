{"version":3,"sources":["store/actions/actionsType.js","shared/utility.js","store/actions/onlineStore.js","store/actions/orders.js","store/actions/auth.js","components/Navigation/NavigationItems/NavigationItems.module.css","components/Navigation/SideDrawer/SideDrawer.module.css","components/UI/Button/Button.js","components/StoreItems/StoreItem/StoreItem.module.css","components/StoreItems/ItemView/ItemView.module.css","assets/Logo/Brand/MockupBrand.svg","components/Navigation/Toolbar/Toolbar.module.css","components/UI/Button/Button.module.css","containers/Store/Store.module.css","components/UI/Spinner/Spinner.js","components/StoreItems/StoreItems.module.css","components/UI/Backdrop/Backdrop.module.css","components/UI/Spinner/Spinner.module.css","components/UI/Modal/Modal.module.css","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.module.css","components/UI/Footer/Footer.module.css","hoc/layout/Layout.module.css","components/StoreItems/StoreItem/StoreItem.js","components/StoreItems/StoreItems.js","components/StoreItems/ItemView/ItemView.js","components/UI/Backdrop/Backdrop.js","components/UI/Modal/Modal.js","containers/Store/Store.js","containers/Auth/Logout/Logout.js","components/Navigation/NavigationItems/NavigationItems.js","components/Navigation/SideDrawer/SideDrawer.js","components/Navigation/SideDrawer/DrawerToggle/DrawerToggle.js","components/Navigation/Toolbar/Toolbar.js","components/UI/Footer/Footer.js","hoc/layout/Layout.js","App.js","serviceWorker.js","store/reducers/onlineStore.js","store/reducers/orders.js","store/reducers/auth.js","index.js"],"names":["ADD_ITEM","REMOVE_ITEM","REMOVE_ALL_OF_ITEM_TYPE","SET_STORE_INVENTORY","FETCH_STORE_INVENTORY_FAILED","STORE_ORDER_START","STORE_ORDER_SUCCESS","STORE_ORDER_FAILED","SEND_STORE_ORDER","FETCH_ORDER_SUCCESS","FETCH_ORDER_FAILED","AUTH_START","AUTH_SUCCESS","AUTH_FAIL","AUTH_LOGOUT","SET_AUTH_REDIRECT_PATH","updateObject","oldObject","updatedProperties","checkValidity","value","rules","isValid","required","trim","minLength","length","maxLength","isEmail","test","isNumeric","addItemToCart","itemID","type","actionTypes","removeItemFromCart","fetchStoreInventory","dispatch","axios","get","then","response","storeInventory","data","catch","error","fetchStoreInventoryFailed","removeAllOfItemType","actionType","sendStoreOrder","orderData","token","post","storeOrderSuccess","storeOrderFailed","fetchOrderStart","userId","queryParams","fetchedOrders","key","push","id","fetchOrderFailed","authSuccess","idToken","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","setTimeout","auth","email","password","needsSignUp","authData","returnSecureToken","url","expirationDate","Date","getTime","expiresIn","setItem","localId","err","setAuthRedirectPath","path","authCheckState","getItem","module","exports","button","props","disabled","className","classes","Button","btnType","join","onClick","clicked","children","spinner","Loader","storeItem","StoreItem","Img","src","imgURL","alt","name","ItemName","ButtonRow","viewItem","Price","price","stockedStatus","ind","addToCart","storeItems","items","map","item","index","toLocaleString","StoreItems","itemView","specs","Object","keys","el","ItemView","Close","ImgContainer","Description","description","SpecsContainer","viewedIndex","toCheckout","backdrop","show","Backdrop","React","memo","modalClosed","Modal","style","transform","opacity","prevProps","nextProps","Store","useState","viewedItem","setViewedItem","setViewedIndex","viewing","setViewing","storeInv","useSelector","state","onlineStore","inStockStatus","firstLoad","useDispatch","action","initStoreInventory","useCallback","useEffect","unviewItemHandler","StoreError","Spinner","testRemove","itemIndex","findIndex","p","newItem","history","Logout","onLogout","to","NavigationItems","cart","isAuthenticated","notification","Notification","NotificationNumber","activeClassName","active","exact","sideDrawer","attachedClasses","SideDrawer","Open","closed","LogoDiv","Brand","Logo","drawerToggle","DrawerToggle","toolbar","Toolbar","drawerToggleClicked","DesktopOnly","hide","footer","Footer","Layout","showSideDrawer","setShowSideDrawer","MainPage","withRouter","onTryAutoSignup","Checkout","lazy","Orders","Auth","routes","render","component","fallback","Boolean","window","location","hostname","match","initState","totalPrice","itemInvCount","ordering","addItem","storeIndex","concat","filter","elState","cartIndex","inventory","removeAllOfItem","setStoreInventory","inStock","reducer","orders","loading","purchased","userOrder","storeOrderStart","fetchOrderSuccess","initalState","authRedirectPath","authStart","authFail","authLogout","composeEnhancers","compose","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","app","basename","process","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.b7e966de.chunk.js","sourcesContent":["// Item Action Types\r\nexport const ADD_ITEM = 'ADD_ITEM';\r\nexport const REMOVE_ITEM = 'REMOVE_ITEM';\r\nexport const REMOVE_ALL_OF_ITEM_TYPE = 'REMOVE_ALL_OF_ITEM_TYPE';\r\n// Retrieve Store Items From The Server\r\nexport const SET_STORE_INVENTORY = 'SET_STORE_INVENTORY';\r\nexport const FETCH_STORE_INVENTORY = 'FETCH_STORE_INVENTORY';\r\nexport const FETCH_STORE_INVENTORY_FAILED = 'FETCH_STORE_INVENTORY_FAILED';\r\n// Store Order Action Types\r\nexport const STORE_ORDER_START = 'STORE_ORDER_START';\r\nexport const STORE_ORDER_SUCCESS = 'STORE_ORDER_SUCCESS';\r\nexport const STORE_ORDER_FAILED = 'STORE_ORDER_FAILED';\r\nexport const SEND_STORE_ORDER = 'SEND_STORE_ORDER';\r\nexport const FETCH_ORDER_START = 'FETCH_ORDER_START';\r\nexport const FETCH_ORDER_SUCCESS = 'FETCH_ORDER_SUCCESS';\r\nexport const FETCH_ORDER_FAILED = 'FETCH_ORDER_FAILED';\r\n// Account Creation Authorization\r\nexport const AUTH_START = 'AUTH_START';\r\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\r\nexport const AUTH_FAIL = 'AUTH_FAIL';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\n// Redirection\r\nexport const SET_AUTH_REDIRECT_PATH = 'SET_AUTH_REDIRECT_PATH';\r\n\r\n\r\n\r\n","export const updateObject = (oldObject, updatedProperties) => {\r\n    return {\r\n        ...oldObject,\r\n        ...updatedProperties\r\n    }\r\n};\r\n\r\nexport const checkValidity = (value, rules) => {\r\n    let isValid = true;\r\n    // check the rules and see it they are valid, the isValid is set as a Gotcha to make sure they all pass not just the last\r\n    if (rules.required) {\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n    // Zip code Length\r\n    if (rules.minLength) {\r\n        isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    // Zip code max length\r\n    if (rules.maxLength) {\r\n        isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    // Check it it is an email (user@anything.com)\r\n    if (rules.isEmail) {\r\n        const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n        isValid = pattern.test(value) && isValid\r\n    }\r\n    // Check that the zip code is numbers\r\n    if (rules.isNumeric) {\r\n        const pattern = /^\\d+$/;\r\n        isValid = pattern.test(value) && isValid\r\n    }\r\n    // If all set rules pass, return true\r\n    return isValid;\r\n}","import * as actionTypes from './actionsType';\r\nimport axios from 'axios';\r\n\r\n// Adds an item to the cart\r\nexport const addItemToCart = (itemID) => {\r\n    return {\r\n        type: actionTypes.ADD_ITEM, \r\n        itemID: itemID\r\n    }\r\n}\r\n// Removes and item from the cart\r\nexport const removeItemFromCart = (itemID) => {\r\n    return {\r\n        type: actionTypes.REMOVE_ITEM, \r\n        itemID: itemID\r\n    }\r\n}\r\n// Set the store inventory when the component mounts and retrieves the data\r\nexport const setStoreInventory = (storeInventory) => {\r\n    return {\r\n        type: actionTypes.SET_STORE_INVENTORY,\r\n        storeInventory: storeInventory,\r\n    };\r\n}\r\n// Store fetch failed\r\nexport const fetchStoreInventoryFailed = (error) => {\r\n    return {\r\n        type: actionTypes.FETCH_STORE_INVENTORY_FAILED,\r\n        error: error\r\n    }\r\n}\r\n// Grab the items in the store from the server\r\nexport const fetchStoreInventory = () => {\r\n    return dispatch => {\r\n            axios.get('https://mockup-online-store.firebaseio.com/storeInventory.json')\r\n            .then(response => {\r\n                dispatch(setStoreInventory(response.data));\r\n            })\r\n            .catch(error => {\r\n                dispatch(fetchStoreInventoryFailed(error));\r\n            });\r\n    };\r\n}\r\n","import * as actionType from './actionsType';\r\nimport axios from 'axios';\r\n\r\nexport const removeAllOfItemType = (itemID) => {\r\n    return {\r\n        type: actionType.REMOVE_ALL_OF_ITEM_TYPE,\r\n        itemID: itemID\r\n    }\r\n}\r\n\r\nexport const storeOrderSuccess = (orderData) => {\r\n    return {\r\n        type: actionType.STORE_ORDER_SUCCESS,\r\n        orderData: orderData\r\n    }\r\n}\r\n\r\nexport const storeOrderFailed = (error) => {\r\n    return {\r\n        type: actionType.STORE_ORDER_FAILED,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const sendStoreOrder = (orderData, token) => {\r\n    return dispatch => {\r\n        axios.post('https://mockup-online-store.firebaseio.com/orders.json?auth=' + token, orderData)\r\n        .then(response => {\r\n            dispatch(storeOrderSuccess( response.data, orderData ));\r\n        })\r\n        .catch(error => {\r\n            dispatch(storeOrderFailed(error));\r\n        });\r\n    }\r\n}\r\n\r\nexport const fetchOrderSuccess = (orderData) => {\r\n    return {\r\n        type: actionType.FETCH_ORDER_SUCCESS,\r\n        orderData: orderData\r\n    }\r\n}\r\n\r\nexport const fetchOrderFailed = (error) => {\r\n    return {\r\n        type: actionType.FETCH_ORDER_FAILED,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const fetchOrderStart = (token, userId) => {\r\n    return dispatch => {\r\n        const queryParams = '?auth=' + token + '&orderBy=\"userId\"&equalTo=\"' + userId + '\"';\r\n        axios.get('https://mockup-online-store.firebaseio.com/orders.json'  + queryParams)\r\n        .then(response => {\r\n            const fetchedOrders = [];\r\n            for (let key in response.data) {\r\n                fetchedOrders.push({\r\n                    ...response.data[key], \r\n                    id: [key]})\r\n            }\r\n            dispatch(fetchOrderSuccess(fetchedOrders))\r\n        })\r\n        .catch(error => {\r\n            dispatch(fetchOrderFailed(error))\r\n        });\r\n    };\r\n}","import * as actionTypes from '../actions/actionsType';\r\nimport axios from 'axios';\r\n\r\nexport const authStart = () => {\r\n    return {\r\n        type: actionTypes.AUTH_START,\r\n    }\r\n}\r\n\r\nexport const authSuccess = (token, userId) => {\r\n    return{\r\n        type: actionTypes.AUTH_SUCCESS,\r\n        idToken: token,\r\n        userId: userId\r\n    }\r\n}\r\n\r\nexport const authFail = (error) => {\r\n    return {\r\n        type: actionTypes.AUTH_FAIL,\r\n        error: error\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('expirationDate');\r\n    localStorage.removeItem('userId');\r\n    return {\r\n        type: actionTypes.AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport const checkAuthTimeout = (expirationTime) => { \r\n    return dispatch => {\r\n        setTimeout(() => {\r\n            dispatch(logout()) \r\n        }, expirationTime * 1000)\r\n    }\r\n}\r\n\r\nexport const auth = (email, password, needsSignUp) => {\r\n    return dispatch => {\r\n        dispatch(authStart());\r\n        const authData = {\r\n            email: email,\r\n            password: password,\r\n            returnSecureToken: true\r\n        };\r\n        let url = `https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBiwoy-R3tLmqwxcsaKxrqdC0GANV3KNY4`\r\n        \r\n        if (!needsSignUp) {\r\n            url = `https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBiwoy-R3tLmqwxcsaKxrqdC0GANV3KNY4`\r\n        }\r\n\r\n        axios.post(url, authData)\r\n            .then(response => {\r\n                // console.log(response);\r\n                const expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000)\r\n                localStorage.setItem('token', response.data.idToken);\r\n                localStorage.setItem('expirationDate', expirationDate);\r\n                localStorage.setItem('userId', response.data.localId);\r\n                dispatch(authSuccess(response.data.idToken, response.data.localId));\r\n                dispatch(checkAuthTimeout(response.data.expiresIn));\r\n            })\r\n            .catch(err => {\r\n                dispatch(authFail(err.response.data.error))\r\n            })\r\n    }\r\n}\r\n\r\nexport const setAuthRedirectPath = (path) => {\r\n    return {\r\n        type: actionTypes.SET_AUTH_REDIRECT_PATH,\r\n        path: path\r\n    }\r\n}\r\n\r\nexport const authCheckState = () => {\r\n    return dispatch => {\r\n        const token = localStorage.getItem('token');\r\n        if (!token) {\r\n            dispatch(logout());\r\n        } else {\r\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\r\n            if (expirationDate <= new Date()) {\r\n                dispatch(logout());\r\n            } else {\r\n                const userId = localStorage.getItem('userId')\r\n                dispatch(authSuccess(token, userId))\r\n                dispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000))\r\n            }\r\n        }\r\n    };\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NavigationItems\":\"NavigationItems_NavigationItems__3goFp\",\"active\":\"NavigationItems_active__3caxk\",\"Notification\":\"NavigationItems_Notification__303gi\",\"NotificationNumber\":\"NavigationItems_NotificationNumber__1FtF4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SideDrawer\":\"SideDrawer_SideDrawer__183tS\",\"Open\":\"SideDrawer_Open__2axUj\",\"Close\":\"SideDrawer_Close__3NC-4\"};","import React from 'react';\r\nimport classes from './Button.module.css';\r\n\r\nconst button = (props) => (\r\n    <button\r\n        disabled={props.disabled}\r\n        className={[classes.Button, classes[props.btnType]].join(' ')}\r\n        onClick={props.clicked}\r\n        >{props.children}</button>\r\n)\r\n\r\nexport default button;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StoreItem\":\"StoreItem_StoreItem__23DZe\",\"Img\":\"StoreItem_Img__3n6UD\",\"ButtonRow\":\"StoreItem_ButtonRow__uiFsQ\",\"ItemName\":\"StoreItem_ItemName__1M8yk\",\"View\":\"StoreItem_View__1BZ8l\",\"Price\":\"StoreItem_Price__1TRiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ItemView\":\"ItemView_ItemView__2H4mA\",\"Close\":\"ItemView_Close__dw_yR\",\"ImgContainer\":\"ItemView_ImgContainer__1W9X2\",\"Description\":\"ItemView_Description__MQYSA\",\"SpecsContainer\":\"ItemView_SpecsContainer__59G_m\"};","module.exports = __webpack_public_path__ + \"static/media/MockupBrand.95571b5e.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Toolbar\":\"Toolbar_Toolbar__39-Js\",\"Logo\":\"Toolbar_Logo__16S-k\",\"DesktopOnly\":\"Toolbar_DesktopOnly__2tTjT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1zOxp\",\"ViewItemAdd\":\"Button_ViewItemAdd__34KGS\",\"ViewItemCheckout\":\"Button_ViewItemCheckout__1aig1\",\"SubmitSignIn\":\"Button_SubmitSignIn__DU7Bl\",\"SignUpSwitch\":\"Button_SignUpSwitch__3B4uk\",\"CartQuantity\":\"Button_CartQuantity__igMkG\",\"Cancel\":\"Button_Cancel__2nEKE\",\"Continue\":\"Button_Continue__2tOME\",\"ContactFormSubmit\":\"Button_ContactFormSubmit__1HguE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Store\":\"Store_Store__GUNPu\",\"StoreError\":\"Store_StoreError__1QhMz\"};","import React from 'react';\r\nimport classes from './Spinner.module.css'\r\n\r\nconst spinner = () => (<div className={classes.Loader}></div>)\r\n\r\nexport default spinner;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StoreItems\":\"StoreItems_StoreItems__H_9fe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__2Xqcd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Spinner_Loader__1NaRz\",\"load3\":\"Spinner_load3__1b1jp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__zhhib\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DrawerToggle\":\"DrawerToggle_DrawerToggle__2Drr3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Footer\":\"Footer_Footer__3MkAA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MainPage\":\"Layout_MainPage__HpAGu\"};","import React from 'react';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './StoreItem.module.css'\r\n\r\nconst storeItem = (props) => {\r\n    return(\r\n        <div className={classes.StoreItem}>\r\n            <div className={classes.Img}>\r\n                <img src={props.imgURL} alt={props.name}/>\r\n            </div>\r\n            <p><strong className={classes.ItemName}>{props.name}</strong></p>\r\n            <div className={classes.ButtonRow}>\r\n                <span>\r\n                    <Button \r\n                    clicked={()=>props.viewItem(props.id)}\r\n                    >View</Button>\r\n                </span>\r\n                <span>\r\n                    <p className={classes.Price}>${props.price}</p>\r\n\r\n                </span>\r\n                <span>\r\n                    <Button \r\n                    disabled={props.stockedStatus[props.ind] === false}\r\n                    clicked={()=>props.addToCart(props.id)}>Add To Cart</Button>\r\n                </span>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nexport default storeItem;\r\n","import React from 'react';\r\nimport StoreItem from './StoreItem/StoreItem';\r\nimport classes from './StoreItems.module.css';\r\n\r\nconst storeItems = (props) => {\r\n    const items = props.items.map((item, index)=>\r\n        <StoreItem \r\n        name={item.name} \r\n        price={item.price.toLocaleString()} \r\n        key={index}\r\n        ind={index}\r\n        id={item.itemID}\r\n        imgURL={item.imgURL}\r\n        viewItem={props.viewItem}\r\n        addToCart={props.addToCart}\r\n        stockedStatus={props.stockedStatus}/>\r\n        );\r\n        \r\n    return(\r\n        <div className={classes.StoreItems}>\r\n            {items}       \r\n        </div>);\r\n}\r\n\r\nexport default storeItems;","import React from 'react';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './ItemView.module.css';\r\n\r\nconst itemView = (props) => {\r\n    const specs = Object.keys(props.items.specs).map(el => {return props.items.specs[el]})\r\n\r\n    return(\r\n        <div className={classes.ItemView}>\r\n            <span>\r\n                <h3>{props.items.name}</h3>\r\n                <button className={classes.Close} onClick={props.clicked}>X</button>\r\n            </span>  \r\n            <div className={classes.ImgContainer}>\r\n                <img src={props.items.imgURL} alt={props.items.name}/>\r\n            </div>\r\n            <p><strong>${props.items.price.toLocaleString()}</strong></p> \r\n            <hr />\r\n            <p className={classes.Description}>{props.items.description}</p>\r\n            <span>\r\n                <div className={classes.SpecsContainer}>\r\n                    {/* <p>LAPTOP SPECS</p> */}\r\n                    <hr />\r\n                    <p>Processor: {specs[0]}</p>\r\n                    <p>RAM: {specs[1]}</p>\r\n                    <p>Storage: {specs[2]}</p>\r\n                    <p>GPU: {specs[3]}</p>\r\n                </div>\r\n                <Button \r\n                btnType=\"ViewItemAdd\"\r\n                disabled={props.stockedStatus[props.viewedIndex] === false}\r\n                clicked={()=>props.addToCart(props.items.itemID)} >Add To Cart</Button>\r\n                <Button \r\n                btnType=\"ViewItemCheckout\"\r\n                clicked={props.toCheckout}\r\n                    >Checkout</Button>\r\n            </span>      \r\n        </div>);\r\n}\r\n\r\n\r\nexport default itemView;\r\n","import React from 'react';\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst backdrop = (props) => (\r\n    props.show ? <div className={props.show ? classes.Backdrop : null} onClick={props.clicked}></div> : null\r\n);\r\n\r\nexport default backdrop;","import React from 'react';\r\nimport Backdrop from '../Backdrop/Backdrop'\r\nimport classes from './Modal.module.css';\r\n\r\nconst Modal = props => {\r\n        return (\r\n            <>\r\n                <Backdrop show={props.show} clicked={props.modalClosed} />\r\n                <div \r\n                    className={classes.Modal}\r\n                    style={{\r\n                        transform: props.show ? 'translateY(0)' : 'translateY(-100vh)',\r\n                        opacity: props.show ? '1': '0'\r\n                    }}>\r\n                    {props.children}\r\n                </div>\r\n            </>\r\n        );\r\n} \r\n\r\nexport default React.memo(Modal, (prevProps, nextProps) => \r\n    nextProps.show === prevProps.show && \r\n    nextProps.children === prevProps.children );","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport StoreItems from '../../components/StoreItems/StoreItems';\r\nimport ItemView from '../../components/StoreItems/ItemView/ItemView';\r\nimport Backdrop from '../../components/UI/Backdrop/Backdrop';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Modal from '../../components/UI/Modal/Modal';\r\nimport classes from './Store.module.css';\r\nimport * as action from '../../store/actions/index';\r\n\r\nexport const Store = props => { \r\n    const [viewedItem, setViewedItem] = useState(null);\r\n    const [viewedIndex, setViewedIndex] = useState(null);\r\n    const [viewing, setViewing] = useState(false);\r\n   \r\n    const storeInv = useSelector(state => state.onlineStore.storeInventory);\r\n    const stockedStatus = useSelector(state => state.onlineStore.inStockStatus);\r\n    const error = useSelector(state => state.onlineStore.error);\r\n    const firstLoad = useSelector(state => state.onlineStore.firstLoad);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addItemToCart = itemID => dispatch(action.addItemToCart(itemID));\r\n    const removeItemFromCart = itemID => dispatch(action.removeItemFromCart(itemID));\r\n    const initStoreInventory = useCallback(() => dispatch(action.fetchStoreInventory()), [dispatch])\r\n\r\n    useEffect(()=>{\r\n        if (firstLoad) {\r\n            initStoreInventory();\r\n        }\r\n    }, [initStoreInventory, firstLoad]);\r\n\r\n    // Item displayed when view button clicked\r\n    const viewItemHandler = (id) => {\r\n        // Find the index that matches the ID of the name to be mutated\r\n        const itemIndex = storeInv.findIndex(p => {\r\n          return p.itemID === id;\r\n        });\r\n        // Find that item that matches store inventory ID\r\n        const newItem = { ...storeInv[itemIndex] }\r\n        setViewedItem(newItem);\r\n        setViewedIndex(itemIndex);\r\n        setViewing(!viewing);\r\n    }\r\n    // Exits out of item view\r\n    const unviewItemHandler = () => {\r\n        setViewedItem(null);\r\n        setViewedIndex(null);\r\n        setViewing(!viewing);\r\n    }\r\n    // Proceeds to checkout (buttons in item view)\r\n    const proceedToCheckout = () => {   \r\n        props.history.push('/checkout');\r\n    }   \r\n    // Error message if database fails to fetch items\r\n    let errorMessage = \"Failed to fetch store items. Try refreshing\";\r\n    // Individual item view \r\n    let itemView = null;\r\n    // All store items, normal display \r\n    let storeItems = error \r\n        ? <div className={classes.StoreError}>\r\n            <Modal show={error}> \r\n                {errorMessage}\r\n            </Modal>\r\n        </div>\r\n        : <Spinner />\r\n    // Store items have loaded   \r\n    if (storeInv) {\r\n        storeItems = (<StoreItems \r\n            items={storeInv}\r\n            testRemove={removeItemFromCart}\r\n            viewItem={viewItemHandler}\r\n            addToCart={addItemToCart} \r\n            stockedStatus={stockedStatus} />\r\n        );\r\n        // If they are viewing an item (click on view button)\r\n        if (viewing) {\r\n            itemView =  \r\n                <ItemView \r\n                    items={viewedItem}\r\n                    clicked={unviewItemHandler}\r\n                    addToCart={addItemToCart}\r\n                    viewedIndex={viewedIndex} \r\n                    stockedStatus={stockedStatus}\r\n                    toCheckout={proceedToCheckout} />\r\n            }    \r\n        }\r\n        return (\r\n            <section className={classes.Store}>\r\n                <Backdrop \r\n                    show={viewing}\r\n                    clicked={unviewItemHandler} />\r\n                {itemView}\r\n                {storeItems}  \r\n            </section>\r\n        );\r\n}\r\n\r\nexport default Store;","import React, { useEffect, useCallback } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { useDispatch } from 'react-redux';\r\nimport * as action from '../../../store/actions/index';\r\n\r\nconst Logout = props => {\r\n    const dispatch = useDispatch();\r\n\r\n    const onLogout = useCallback(() => dispatch(action.logout()), [dispatch]);\r\n    const initStoreInventory = useCallback(() => dispatch(action.fetchStoreInventory()), [dispatch]);\r\n\r\n    useEffect(() => {\r\n        onLogout();\r\n        initStoreInventory();\r\n    }, [onLogout, initStoreInventory]);\r\n\r\n    return <Redirect to=\"/\"/>;  \r\n}\r\n\r\nexport default Logout;\r\n","import React from 'react';\r\nimport classes from './NavigationItems.module.css';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst NavigationItems = props => {\r\n    const cart = useSelector(state => state.onlineStore.cart) \r\n    const isAuthenticated = useSelector(state => state.auth.token !== null)\r\n    \r\n    let notification = null \r\n    if (cart.length >= 1) {\r\n        notification = <span className={classes.Notification}><p className={classes.NotificationNumber}>{cart.length}</p></span>\r\n    }\r\n\r\n    return (  \r\n        <ul className={classes.NavigationItems}>\r\n            <li>\r\n                <NavLink to=\"/\" activeClassName={classes.active} exact>Store</NavLink>\r\n            </li> \r\n            {isAuthenticated \r\n                ? <li><NavLink to=\"/orders\" activeClassName={classes.active} exact>Orders</NavLink></li> \r\n                : null}                    \r\n            <li>\r\n                <span>{notification}</span>\r\n                <NavLink to=\"/checkout\" activeClassName={classes.active} exact>Cart</NavLink>\r\n            </li>\r\n            {!isAuthenticated \r\n                ? <li><NavLink to=\"/signup\" activeClassName={classes.active} exact>SignUp</NavLink></li>\r\n                : <li><NavLink to=\"/logout\" activeClassName={classes.active}>Logout</NavLink></li>\r\n            }\r\n        </ul>\r\n    );\r\n} \r\n\r\nexport default NavigationItems;","import React from 'react';\r\nimport Backdrop from '../../UI/Backdrop/Backdrop';\r\nimport Brand from '../../../assets/Logo/Brand/MockupBrand.svg';\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\nimport classes from './SideDrawer.module.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst sideDrawer = (props) => {\r\n    let attachedClasses = [classes.SideDrawer, classes.Close];\r\n    if(props.show){\r\n        attachedClasses = [classes.SideDrawer, classes.Open];\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Backdrop show={props.show} clicked={props.closed}/>\r\n            <div className={attachedClasses.join(' ')} onClick={props.closed}>\r\n                <button onClick={props.closed}>X</button>\r\n                <div className={classes.LogoDiv}>\r\n                    <Link to='/'>\r\n                        <img src={Brand} className={classes.Logo} alt={'Top Logo'} /> \r\n                    </Link>\r\n                </div> \r\n                <nav>\r\n                    <NavigationItems />\r\n                </nav>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default sideDrawer;","import React from 'react';\r\nimport classes from './DrawerToggle.module.css'\r\n\r\nconst drawerToggle = (props) => (\r\n    <div className={classes.DrawerToggle} onClick={props.clicked}>\r\n        <div></div>\r\n        <div></div>\r\n        <div></div>\r\n    </div>\r\n);\r\n\r\nexport default drawerToggle;","import React from 'react';\r\nimport Logo from '../../../assets/Logo/Brand/MockupBrand.svg';\r\nimport NavigationItems from '../NavigationItems/NavigationItems';\r\nimport SideDrawer from '../SideDrawer/SideDrawer';\r\nimport DrawerToggle from '../SideDrawer/DrawerToggle/DrawerToggle';\r\nimport classes from './Toolbar.module.css';\r\nimport { Link } from 'react-router-dom'\r\n\r\nconst toolbar = (props) => {\r\n    return(\r\n        <header className={classes.Toolbar}>\r\n            <DrawerToggle clicked={props.drawerToggleClicked}/>\r\n            <>\r\n                <SideDrawer show={props.show} closed={props.closed}/>\r\n            </>\r\n            <div className={classes.Logo}>\r\n                <Link to='/'>\r\n                    <img src={Logo} alt={'Top Logo'} />  \r\n                </Link>\r\n            </div> \r\n            <nav className={classes.DesktopOnly}>\r\n                <NavigationItems hide={props.show}/>    \r\n            </nav>      \r\n        </header>);\r\n}\r\n\r\nexport default toolbar;","import React from 'react';\r\nimport classes from './Footer.module.css';\r\n \r\nconst footer = React.memo(() => {\r\n    return (\r\n        <footer className={classes.Footer}>\r\n            <p>This is a portfolio project, no items will actually be sold.</p>\r\n        </footer>\r\n    );\r\n})\r\n \r\nexport default footer;","import React, { useState } from 'react';\r\nimport Toolbar from '../../components/Navigation/Toolbar/Toolbar';\r\nimport Footer from '../../components/UI/Footer/Footer';\r\nimport classes from './Layout.module.css'\r\n\r\n\r\nconst Layout = props => {\r\n    const [showSideDrawer, setShowSideDrawer] = useState(false);\r\n\r\n    const sideDrawerClosedHandler = () => {\r\n        setShowSideDrawer(false);\r\n    }\r\n\r\n    const sideDrawerOpenHandler = () => {\r\n        setShowSideDrawer(!showSideDrawer);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Toolbar show={showSideDrawer} \r\n            closed={sideDrawerClosedHandler} \r\n            drawerToggleClicked={sideDrawerOpenHandler}/>\r\n            <main className={classes.MainPage}>\r\n                {props.children}\r\n            </main>\r\n            <Footer />\r\n        </>\r\n    );\r\n}\r\nexport default Layout;","import React, { useEffect, useCallback, Suspense } from 'react';\nimport { Route, Switch, withRouter, Redirect } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Store from './containers/Store/Store';\nimport Logout from './containers/Auth/Logout/Logout';\nimport './App.css';\nimport Layout from './hoc/layout/Layout';\nimport * as action from './store/actions/index';\n\nconst App = props => {\n  const isAuthenticated = useSelector(state => state.auth.token !== null);\n\n  const dispatch = useDispatch();\n  const onTryAutoSignup = useCallback(() => dispatch(action.authCheckState()), [dispatch]);\n\n  useEffect(()=>{\n    onTryAutoSignup();\n  }, [onTryAutoSignup]);\n\n  const Checkout = React.lazy(() => {\n    return import('./containers/Checkout/Checkout');\n  });\n  const Orders = React.lazy(() => {\n    return import('./containers/Order/Order');\n  });\n  const Auth = React.lazy(() => {\n    return import('./containers/Auth/Auth');\n  });\n\n  let routes = (\n    <Switch>\n      <Route path=\"/checkout\" render={(props) => <Checkout {...props}/>} />\n      <Route path=\"/signup\" render={(props) => <Auth {...props}/>}/>\n      <Route path=\"/\" exact component={Store} />\n      <Redirect to=\"/\" />\n    </Switch>\n  );\n\n  if (isAuthenticated) {\n    routes = (\n      <Switch>\n            <Route path=\"/checkout\" render={(props) => <Checkout {...props}/>} />\n            <Route path=\"/orders\" render={(props) => <Orders {...props}/>} />\n            <Route path=\"/Logout\" component={Logout} />\n            <Route path=\"/\" exact component={Store}/> \n            <Redirect to=\"/\" />\n    </Switch>\n    );\n  }\n\n  return (\n    <div className=\"App\">\n      <Layout >\n        <Suspense fallback={<p>Loading...</p>}>{routes}</Suspense>\n      </Layout>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionType from '../actions/actionsType';\r\nimport { updateObject } from '../../shared/utility';\r\n\r\nconst initState = {\r\n    storeInventory: null,\r\n    cart: [],\r\n    totalPrice: 0,\r\n    itemInvCount: null,\r\n    inStockStatus: null,\r\n    error: false,\r\n    firstLoad: true,\r\n    ordering: false,\r\n}\r\n\r\nconst addItem = (state, action, storeIndex) => {\r\n    return updateObject(state, {\r\n            // IF the item is in stock\r\n            cart: state.inStockStatus[storeIndex] !== false \r\n            // Add item with the same item ID to the cart\r\n                ? state.cart.concat(state.storeInventory.filter(el => el.itemID === action.itemID)) \r\n            // Return if not in stock\r\n                : state.cart,\r\n            // IF the item is in stock\r\n            totalPrice: state.inStockStatus[storeIndex] !== false \r\n            // Add and Update the total price\r\n                ? state.totalPrice + state.storeInventory[storeIndex].price \r\n            // Item remains the same\r\n                : state.totalPrice, \r\n            // Deduct an item count from the inventory status IF there are items (not = 0), ELSE if there is none left will return (as 0)  \r\n            itemInvCount: state.itemInvCount.map((el, ind) => ind === storeIndex && el !== 0 ? el - 1 : el),\r\n            // IF the count for that item in stock is 0\r\n            inStockStatus: state.itemInvCount[storeIndex] - 1 === 0  \r\n            // Selected item out of stock \r\n                ? state.inStockStatus.map((elState, ind) => ind === storeIndex ? elState = false : elState) \r\n            // item is in stock \r\n                : state.inStockStatus,\r\n            // Am currently ordering when an item is added\r\n            ordering: true,\r\n    });\r\n};\r\n\r\nconst removeItem = (state, action, cartIndex, storeIndex) => {\r\n    return updateObject(state, {\r\n            // Find the item, return a new array with it removed (filtered out)\r\n            cart: state.cart.filter((item, index) => index !== cartIndex),\r\n            // If there items in the cart\r\n            totalPrice: state.cart.length !== 0 \r\n            // Deduct and update the total price\r\n                ? state.totalPrice - state.cart[cartIndex].price \r\n            // no items = $0\r\n                : 0,  \r\n            // Add an item count back to the inventory status, checked against the original import, if it is equal don't add more\r\n            itemInvCount: state.itemInvCount.map((el, ind) => ind === storeIndex && el !== state.storeInventory[storeIndex].inventory ? el + 1 : el), \r\n            // Check the stock for that item is at 0 \r\n            inStockStatus: state.itemInvCount[storeIndex] === 0 \r\n            // Selected item state is true\r\n                ? state.inStockStatus.map((elState, ind) => ind === storeIndex ? elState = true : elState) \r\n            // Remains false (out of stock)\r\n                : state.inStockStatus,  \r\n            // reducedCart: reducedCart,\r\n            // Ordering\r\n            ordering: true\r\n    });\r\n};\r\n\r\nconst removeAllOfItem = (state, action, cartIndex, storeIndex) => {\r\n    return updateObject(state, {\r\n            // Remove all instances of this item\r\n            cart: state.cart.filter((item) => item.itemID !== action.itemID),\r\n            // cart: state.cart.filter((item, index) => index !== cartIndex),\r\n            // Update the total price (Total price - (cart item price (ex: $500) * (number of that item inside the cart))\r\n            totalPrice: state.cart.length !== 0 \r\n            ? state.totalPrice - (state.cart[cartIndex].price * (state.storeInventory[storeIndex].inventory - state.itemInvCount[storeIndex])) \r\n            : 0,\r\n            // Update the inventory count, that item that just got removed, (matching indexes) will be back at original storeInvetory count \r\n            itemInvCount: state.itemInvCount.map((el, ind) => ind === storeIndex && el !== state.storeInventory[storeIndex].inventory ? el = state.storeInventory[storeIndex].inventory : el),\r\n            // Item should now be back in stock, since it is not in the cart anymore\r\n            inStockStatus: state.inStockStatus.map((elState, ind) => ind === storeIndex ? elState = true : elState),\r\n            // reducedCart: reducedCart,\r\n            ordering: true\r\n    });\r\n};\r\n\r\nconst fetchStoreInventoryFailed = (state, action) => {\r\n    return updateObject(state, {error: true});\r\n};\r\n\r\nconst setStoreInventory = (state, action) => {\r\n    return updateObject(state, {\r\n        // Set store inventory\r\n        storeInventory: action.storeInventory,\r\n        // Set item inv count (items in stock by number)\r\n        itemInvCount: action.storeInventory.map(el => el.inventory),\r\n        // Set item inStock status (in stock by true or falsey statements)\r\n        inStockStatus: action.storeInventory.map(el => el.inStock),\r\n        // Set a fresh cart (0 items)\r\n        cart: [], \r\n        // Set to false as first load just now happened\r\n        firstLoad: false,\r\n        // Fresh slate, no ordering has happened\r\n        ordering: false\r\n    });\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    let storeIndex;\r\n    let cartIndex;\r\n    // Once the store loads, these can be used for storeInventory and Cart indexing\r\n    if (state.storeInventory) {\r\n        // Index inside of the storeInventory\r\n        storeIndex = state.storeInventory.findIndex(el => el.itemID === action.itemID); \r\n        // Index inside of the cart\r\n        cartIndex = state.cart.findIndex(el => el.itemID === action.itemID);\r\n    }\r\n\r\n    switch ( action.type ) {\r\n        case actionType.ADD_ITEM: return addItem( state, action, storeIndex )\r\n        case actionType.REMOVE_ITEM: return removeItem( state, action, cartIndex, storeIndex )\r\n        case actionType.REMOVE_ALL_OF_ITEM_TYPE: return removeAllOfItem( state, action, cartIndex, storeIndex )\r\n        case actionType.FETCH_STORE_INVENTORY_FAILED: return fetchStoreInventoryFailed( state, action )\r\n        case actionType.SET_STORE_INVENTORY: return setStoreInventory( state, action );\r\n        default: return state;\r\n    }\r\n}\r\n    \r\n\r\nexport default reducer;","import * as actionType from '../actions/actionsType';\r\nimport { updateObject } from '../../shared/utility';\r\n\r\nconst initState = {\r\n    orders: [],\r\n    loading: false,\r\n    purchased: false,\r\n    userOrder: null,\r\n    error: false,\r\n}\r\n\r\nconst storeOrderStart = (state, action) => {\r\n    return updateObject(state, {loading: true})\r\n};\r\n\r\nconst sendStoreOrder = (state, action) => {\r\n    return updateObject(state, {\r\n        orders: state.orders.concat(action.orderData),\r\n        loading: false,\r\n        purchased: true\r\n    });\r\n};\r\n\r\nconst fetchOrderSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        userOrder: action.orderData,\r\n        loading: false\r\n    });\r\n};\r\n\r\nconst storeOrderFailed = (state, action) => {\r\n    return updateObject(state, {error: true})\r\n}\r\n\r\nconst reducer = (state = initState, action) => {\r\n    switch ( action.type ) {\r\n        case actionType.STORE_ORDER_START: return storeOrderStart(state, action);\r\n        case actionType.SEND_STORE_ORDER: return sendStoreOrder(state, action);\r\n        case actionType.FETCH_ORDER_SUCCESS: return fetchOrderSuccess(state, action);\r\n        case actionType.STORE_ORDER_FAILED: return storeOrderFailed(state, action);\r\n        default: return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionsType';\r\nimport { updateObject } from '../../shared/utility';\r\n\r\nconst initalState = {\r\n    token: null,\r\n    userId: null, \r\n    error: null,\r\n    loading: false,\r\n    authRedirectPath: '/'\r\n};\r\n\r\nconst authStart = (state, action) => {\r\n    return updateObject(state, { error: null, loading: true }); \r\n}\r\n\r\nconst authSuccess = (state, action) => {\r\n    return updateObject(state, {\r\n        token: action.idToken,\r\n        userId: action.userId,\r\n        error: null, \r\n        loading: false\r\n    });\r\n}\r\n\r\nconst authFail = (state, action) => {\r\n    return updateObject(state, {\r\n        error: action.error,\r\n        loading: false\r\n    })\r\n}\r\n\r\nconst authLogout = (state, action) => {\r\n    return updateObject(state, {token: null, userId: null})\r\n}\r\n\r\nconst setAuthRedirectPath = (state, action) => {\r\n    return updateObject(state, {authRedirectPath: action.path})\r\n}\r\n\r\n\r\nconst reducer = (state = initalState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.AUTH_START: return authStart(state, action);\r\n        case actionTypes.AUTH_SUCCESS: return authSuccess(state, action);\r\n        case actionTypes.AUTH_FAIL: return authFail(state, action);\r\n        case actionTypes.AUTH_LOGOUT: return authLogout(state, action);\r\n        case actionTypes.SET_AUTH_REDIRECT_PATH: return setAuthRedirectPath(state, action);\r\n        default: \r\n            return state;\r\n    }\r\n} \r\n\r\nexport default reducer;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport thunk from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport onlineStore from './store/reducers/onlineStore';\r\nimport orders from './store/reducers/orders';\r\nimport auth from './store/reducers/auth';\r\n\r\nconst composeEnhancers = process.env.NODE_ENV === 'development' ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : null || compose;\r\n\r\nconst rootReducer = combineReducers({\r\n  onlineStore: onlineStore,\r\n  orders: orders,\r\n  auth: auth,\r\n});\r\n\r\nexport const store = createStore(\r\n  rootReducer,\r\n  composeEnhancers(applyMiddleware(thunk)));\r\n\r\n\r\nconst app = (  \r\n  <Provider store={store}>\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <App />\r\n      </BrowserRouter>\r\n  </Provider>  \r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {app}\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}