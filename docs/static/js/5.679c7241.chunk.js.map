{"version":3,"sources":["containers/Order/Order.module.css","containers/Order/Order.js"],"names":["module","exports","Order","props","userOrder","useSelector","state","orders","token","auth","userId","dispatch","useDispatch","fetchOrder","useCallback","action","useEffect","order","map","el","key","id","className","classes","OrderContainer","cart","ind","ItemsContainer","name","price"],"mappings":"gGACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,eAAiB,8BAA8B,eAAiB,gC,gCCD/G,mEA6CeC,UAvCD,SAAAC,GACV,IAAMC,EAAYC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,OAAOH,aAC9CI,EAAQH,aAAY,SAAAC,GAAK,OAAIA,EAAMG,KAAKD,SACxCE,EAASL,aAAY,SAAAC,GAAK,OAAIA,EAAMG,KAAKC,UAEzCC,EAAWC,cAEXC,EAAaC,uBAAY,SAACN,EAAOE,GAAR,OAAmBC,EAASI,IAAuBP,EAAOE,MAAU,CAACC,IAEpGK,qBAAU,WACNH,EAAWL,EAAOE,KACnB,CAACG,EAAYL,EAAOE,IAEvB,IAAIO,EAAQ,kBAAC,IAAD,MAoBZ,OAlBIb,IACAa,EAAQb,EAAUc,KAAI,SAACC,GACnB,OACI,yBAAKC,IAAKD,EAAGE,GAAIC,UAAWC,IAAQC,gBAChC,wCAAa,gCAASL,EAAGE,KACzB,6BACKF,EAAGM,KAAKP,KAAI,SAACC,EAAGO,GAAJ,OACT,yBAAKJ,UAAWC,IAAQI,eAAeP,IAAKM,GACxC,oCAAUP,EAAGS,MACb,sCAAYT,EAAGU,YAI3B,qCAAU,oCAAUV,EAAGU,aAMnC,yBAAKP,UAAWC,IAAQrB,OACnBe","file":"static/js/5.679c7241.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__1sLhU\",\"OrderContainer\":\"Order_OrderContainer__2Km0o\",\"ItemsContainer\":\"Order_ItemsContainer__d8Lvz\"};","import React, { useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Order.module.css';\r\nimport * as action from '../../store/actions/index';\r\n\r\nconst Order = props => {\r\n    const userOrder = useSelector(state => state.orders.userOrder);\r\n    const token = useSelector(state => state.auth.token);\r\n    const userId = useSelector(state => state.auth.userId);\r\n\r\n    const dispatch = useDispatch();\r\n    \r\n    const fetchOrder = useCallback((token, userId) => dispatch(action.fetchOrderStart(token, userId)), [dispatch])\r\n\r\n    useEffect(()=>{\r\n        fetchOrder(token, userId);\r\n    }, [fetchOrder, token, userId])\r\n\r\n    let order = <Spinner />\r\n\r\n    if (userOrder){\r\n        order = userOrder.map((el) => {\r\n            return (\r\n                <div key={el.id} className={classes.OrderContainer}>\r\n                    <p>ORDER ID: <strong>{el.id}</strong></p>\r\n                    <div>\r\n                        {el.cart.map((el,ind) => ( \r\n                            <div className={classes.ItemsContainer}key={ind}>\r\n                                <p>Item: {el.name}</p>\r\n                                <p>Price: ${el.price}</p>\r\n                            </div> )\r\n                       )}               \r\n                    </div>\r\n                    <p>Total: <strong>${el.price}</strong></p>\r\n                </div>\r\n            )            \r\n        })\r\n    }\r\n    return (\r\n        <div className={classes.Order}>\r\n            {order}\r\n        </div> );\r\n}\r\n\r\nexport default Order;"],"sourceRoot":""}