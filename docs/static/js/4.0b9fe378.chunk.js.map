{"version":3,"sources":["components/UI/Form/Input/Input.js","components/UI/Form/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["input","props","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","type","config","className","join","value","onChange","changed","defaultValue","options","map","option","key","displayValue","Input","module","exports","Auth","useState","email","inputType","placeholder","validation","required","isEmail","valid","password","minLength","controls","setControls","needsSignUp","setNeedsSignUp","loading","useSelector","state","auth","error","isAuthenticated","token","ordering","onlineStore","authRedirectPath","dispatch","useDispatch","onSetAuthRedirectPath","useCallback","action","useEffect","formElementsArray","id","form","formElement","event","controlName","updatedControls","updateObject","target","checkValidity","inputChangedHandler","errorMessage","FormError","message","authRedirect","to","SignUpContainer","onSubmit","preventDefault","onAuth","btnType","clicked"],"mappings":"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","file":"static/js/4.0b9fe378.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let input = null\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if ( props.invalid && props.shouldValidate && props.touched) { \r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch ( props.type ) {\r\n        case ('input'):\r\n            input = <input \r\n                {...props.config}\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n            break;\r\n        case ('textarea'): \r\n            input = <input \r\n                {...props.config}\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case ('select'):\r\n            input = (\r\n                <select\r\n                // value={props.value}\r\n                onChange={props.changed} \r\n                className={inputClasses.join(' ')}\r\n                defaultValue={'Fastest'}>\r\n                    {props.config.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>))}\r\n                </select>) \r\n                break;\r\n        default: input = <input \r\n                    {...props.config}\r\n                    className={classes.InputElement} \r\n                    value={props.value} />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            {input}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1y4Qb\",\"InputElement\":\"Input_InputElement__22KkH\",\"Invalid\":\"Input_Invalid__mGjB6\",\"Label\":\"Input_Label__3-Wmr\",\"ValidationError\":\"Input_ValidationError__eyrcV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1yLb2\",\"SignUpContainer\":\"Auth_SignUpContainer__3YZoN\",\"FormError\":\"Auth_FormError__2UHcP\"};","import React, { useState, useEffect, useCallback } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\nimport Input from '../../components/UI/Form/Input/Input';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as action from '../../store/actions/index';\r\n\r\nconst Auth = props => {\r\n    const [controls, setControls] = useState({\r\n            email: {\r\n                inputType: 'input',\r\n                config: {\r\n                    type: 'email',\r\n                    placeholder: 'Your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                inputType: 'input',\r\n                config: {\r\n                    type: 'password',\r\n                    placeholder: 'Your Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n    })  \r\n    const [needsSignUp, setNeedsSignUp] = useState(true);\r\n\r\n    const loading = useSelector(state => state.auth.loading)\r\n    const error = useSelector(state => state.auth.error)\r\n    const isAuthenticated = useSelector(state => state.auth.token !== null)\r\n    const ordering = useSelector(state => state.onlineStore.ordering )\r\n    const authRedirectPath = useSelector(state => state.auth.authRedirectPath) \r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onAuth = (email, password, needsSignUp) => dispatch(action.auth(email, password, needsSignUp));\r\n    const onSetAuthRedirectPath = useCallback(() => dispatch(action.setAuthRedirectPath('/')), [dispatch]);\r\n    \r\n    useEffect(() =>{\r\n        if (!ordering && authRedirectPath !== '/'){\r\n            onSetAuthRedirectPath();\r\n        }  \r\n    }, [onSetAuthRedirectPath, ordering, authRedirectPath])\r\n\r\n    const inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = updateObject(controls, {\r\n            [controlName]: updateObject(controls[controlName], {\r\n                ...controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, controls[controlName].validation),\r\n                touched: true\r\n            })\r\n        });\r\n        setControls(updatedControls);\r\n    }\r\n\r\n    const switchAuthModeHandler = () => {\r\n        setNeedsSignUp(!needsSignUp);\r\n    }\r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        onAuth(controls.email.value, controls.password.value, needsSignUp)\r\n    }\r\n\r\n    const formElementsArray = []; \r\n    for (let key in controls){\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: controls[key]\r\n        });\r\n    }\r\n\r\n    let form = ( formElementsArray.map(formElement => (\r\n        <Input \r\n            key={formElement.id}\r\n            type={formElement.config.inputType} \r\n            config={formElement.config.config}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid} \r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event)=>inputChangedHandler(event, formElement.id)}/>\r\n        )));\r\n\r\n    if (loading) {\r\n        form = <Spinner />\r\n    }\r\n\r\n    let errorMessage = null;\r\n\r\n    if (error) {\r\n        errorMessage = (\r\n            <p className={classes.FormError}>{error.message}</p>\r\n        )\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if (isAuthenticated) {\r\n        authRedirect = <Redirect to={authRedirectPath} />\r\n    }\r\n\r\n    return (\r\n        <section className={classes.Auth}>\r\n            {authRedirect}\r\n            \r\n            <div className={classes.SignUpContainer}> \r\n                <h3>{needsSignUp \r\n                    ? 'SIGN UP' \r\n                    : 'SIGN IN'}\r\n                </h3>\r\n                {errorMessage}\r\n                <form onSubmit={submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"SubmitSignIn\" type=\"submit\">SUBMIT</Button>\r\n                </form>\r\n                    <Button\r\n                    btnType=\"SignUpSwitch\"\r\n                    clicked={switchAuthModeHandler} >\r\n                    {needsSignUp \r\n                        ? 'Already have an account? Switch to Sign In.' \r\n                        : 'Need an account? Switch to Sign Up.'}</Button>\r\n            </div>\r\n        </section>\r\n    );\r\n}\r\n\r\nexport default Auth;"],"sourceRoot":""}