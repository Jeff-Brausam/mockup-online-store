{"version":3,"sources":["components/UI/Form/Input/Input.js","components/UI/Form/Input/Input.module.css","containers/Checkout/ContactForm/ContactForm.module.css","components/Cart/CartItem/CartItem.module.css","containers/Checkout/Checkout.module.css","containers/Checkout/ContactForm/ContactForm.js","components/Cart/CartItem/CartItem.js","components/Cart/Cart.js","containers/Checkout/Checkout.js"],"names":["input","props","inputClasses","classes","InputElement","invalid","shouldValidate","touched","push","Invalid","type","config","className","join","value","onChange","changed","defaultValue","options","map","option","key","displayValue","Input","module","exports","ContactForm","cart","useSelector","state","onlineStore","totalPrice","loading","orders","token","auth","userId","dispatch","useDispatch","useState","name","inputType","placeholder","validation","required","valid","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","orderForm","setOrderForm","formIsValid","setFormIsValid","formElementsArray","id","form","formElement","event","selectedInput","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","curFormIsValid","inputChangedHandler","Button","btnType","clicked","e","preventDefault","formData","formElementIdentifier","order","action","sendStoreOrder","price","orderData","history","Spinner","CartItem","ImageContainer","src","img","alt","RemoveAll","onClick","removeAllofItem","quantity","tempRemove","tempAdd","disabled","inStock","index","Cart","reducedCart","setReducedCart","useLayoutEffect","reduce","acc","item","includes","sort","a","b","localeCompare","curCart","el","ind","storeInv","findIndex","p","itemID","imgURL","Checkout","storeInventory","stockedStatus","inStockStatus","isAuthenticated","length","localStorage","removeItem","userOrder","Total","goBack","replace","path","match","render"],"mappings":"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","file":"static/js/3.08bcf351.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n    let input = null\r\n    const inputClasses = [classes.InputElement];\r\n\r\n    if ( props.invalid && props.shouldValidate && props.touched) { \r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch ( props.type ) {\r\n        case ('input'):\r\n            input = <input \r\n                {...props.config}\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed}/>\r\n            break;\r\n        case ('textarea'): \r\n            input = <input \r\n                {...props.config}\r\n                className={inputClasses.join(' ')}\r\n                value={props.value}\r\n                onChange={props.changed} />\r\n            break;\r\n        case ('select'):\r\n            input = (\r\n                <select\r\n                // value={props.value}\r\n                onChange={props.changed} \r\n                className={inputClasses.join(' ')}\r\n                defaultValue={'Fastest'}>\r\n                    {props.config.options.map(option => (\r\n                        <option key={option.value} value={option.value}>\r\n                            {option.displayValue}\r\n                        </option>))}\r\n                </select>) \r\n                break;\r\n        default: input = <input \r\n                    {...props.config}\r\n                    className={classes.InputElement} \r\n                    value={props.value} />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            {input}\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3SlUF\",\"InputElement\":\"Input_InputElement__1lQHs\",\"Invalid\":\"Input_Invalid__1Knru\",\"Label\":\"Input_Label__1BBnR\",\"ValidationError\":\"Input_ValidationError__1nqym\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactForm\":\"ContactForm_ContactForm__tba4H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CartItem\":\"CartItem_CartItem__3B9DA\",\"RemoveAll\":\"CartItem_RemoveAll__2YL7-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkout\":\"Checkout_Checkout__2OwqE\",\"Total\":\"Checkout_Total__2EInq\"};","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport Input from '../../../components/UI/Form/Input/Input';\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\nimport classes from './ContactForm.module.css';\r\nimport * as action from '../../../store/actions/index';\r\n\r\nconst ContactForm = props => {\r\n    const cart = useSelector(state => state.onlineStore.cart);\r\n    const totalPrice = useSelector(state => state.onlineStore.totalPrice); \r\n    const loading = useSelector(state => state.orders.loading); \r\n    const token = useSelector(state => state.auth.token); \r\n    const userId = useSelector(state => state.auth.userId); \r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const sendStoreOrder = (order,  token) => dispatch(action.sendStoreOrder(order, token));\r\n    const initStoreInventory = () => dispatch(action.fetchStoreInventory());\r\n\r\n    const [orderForm, setOrderForm] = useState({\r\n            name: {\r\n                inputType: 'input',\r\n                config: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                inputType: 'input',\r\n                config: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                inputType: 'input',\r\n                config: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                inputType: 'input',\r\n                config: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },  \r\n            email: {\r\n                inputType: 'input',\r\n                config: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },   \r\n            deliveryMethod: {\r\n                inputType: 'select',\r\n                config: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            },\r\n        })\r\n\r\n    const [formIsValid, setFormIsValid] = useState(false);\r\n    \r\n    // Handles the order and sends it to the server\r\n    const orderHandler = (e) => {\r\n        e.preventDefault();\r\n\r\n        const formData = {};\r\n\r\n        for (let formElementIdentifier in orderForm) {\r\n            formData[formElementIdentifier] = orderForm[formElementIdentifier];\r\n        }\r\n\r\n        const order = {\r\n            cart: cart,\r\n            price: totalPrice,\r\n            orderData: formData,\r\n            userId: userId\r\n        }\r\n\r\n        sendStoreOrder(order , token);\r\n        props.history.push('/');\r\n        initStoreInventory();\r\n    }\r\n    // Handles inputs checks if valid entry\r\n    const inputChangedHandler = (event, selectedInput) => {  \r\n        const updatedFormElement = updateObject(orderForm[selectedInput], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, orderForm[selectedInput].validation),\r\n            touched: true,\r\n        });\r\n\r\n        const updatedOrderForm = updateObject(orderForm, {\r\n            [selectedInput]: updatedFormElement\r\n        });\r\n\r\n        let curFormIsValid = true;\r\n        for (let selectedInput in updatedOrderForm){\r\n            curFormIsValid = updatedOrderForm[selectedInput].valid && formIsValid;\r\n        }\r\n        setOrderForm(updatedOrderForm);\r\n        setFormIsValid(curFormIsValid);\r\n    }\r\n\r\n    const formElementsArray = []; \r\n    // Takes the above form elements and configures them, into the array.\r\n    for (let key in orderForm){\r\n        formElementsArray.push({\r\n            id: key,\r\n            config: orderForm[key]\r\n        });\r\n    }\r\n        \r\n    let form = (\r\n            <form>\r\n                {formElementsArray.map(formElement => (\r\n                <Input \r\n                    key={formElement.id}\r\n                    type={formElement.config.inputType} \r\n                    config={formElement.config.config}\r\n                    value={formElement.config.value} \r\n                    invalid={!formElement.config.valid} \r\n                    shouldValidate={formElement.config.validation}\r\n                    touched={formElement.config.touched}\r\n                    changed={(event)=>inputChangedHandler(event, formElement.id)}/>\r\n                ))}\r\n                <Button \r\n                    btnType=\"ContactFormSubmit\"\r\n                    type=\"submit\"\r\n                    clicked={orderHandler}>SUBMIT ORDER</Button>\r\n            </form> )\r\n        \r\n    if (loading) {\r\n        form = <Spinner />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.ContactForm}>\r\n            <h4>Enter your information</h4>\r\n            {form}\r\n        </div> );\r\n}\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport classes from './CartItem.module.css';\r\nimport Button from '../../UI/Button/Button';\r\n\r\nconst CartItem = (props) => {\r\n    return (\r\n        <div className={classes.CartItem}>\r\n            <span>\r\n                <div className={classes.ImageContainer}>\r\n                    <img src={props.img} alt={props.name} />\r\n                </div>\r\n                <div>\r\n                    <p>{props.name}</p>\r\n                    <p>Price: <strong>${props.price}</strong></p>\r\n                </div>\r\n                <div>\r\n                    <button \r\n                        className={classes.RemoveAll}\r\n                        onClick={()=>props.removeAllofItem(props.id)}>X</button>\r\n                    <p>Quantity: {props.quantity}</p>\r\n                    <Button \r\n                        btnType=\"CartQuantity\"\r\n                        clicked={()=>props.tempRemove(props.id)}>-</Button>\r\n                    <Button \r\n                        btnType=\"CartQuantity\"\r\n                        clicked={()=>props.tempAdd(props.id)}\r\n                        disabled={props.inStock[props.index] === false}>+</Button>\r\n                </div>\r\n            </span>\r\n        </div>\r\n    );\r\n};\r\n \r\nexport default CartItem;","import React, { useState, useLayoutEffect } from 'react';\r\nimport CartItem from './CartItem/CartItem';\r\n\r\nconst Cart = (props) => {\r\n    const [reducedCart, setReducedCart] = useState(props.cart);\r\n\r\n    useLayoutEffect(()=> {\r\n        let value = props.cart.reduce((acc, item)=>{\r\n            // If the item has not appeared already\r\n            if (!acc.includes(item)){\r\n                // Add to array\r\n                acc.push(item);\r\n                // Sort to make it in alphabetical order  \r\n                acc.sort((a,b) => a.name.localeCompare(b.name));\r\n            } else {\r\n                return acc;\r\n            }\r\n            return acc;\r\n        }, [])\r\n            setReducedCart(value);\r\n        return () => value = null;\r\n    }, [props.cart])\r\n    // Gets the quantity\r\n    let quantity = props.cart.reduce((curCart, item) => {\r\n        if (item.name in curCart) {\r\n            curCart[item.name]++  \r\n        }\r\n        else {\r\n            curCart[item.name] = 1\r\n        }\r\n        return curCart;\r\n    }, []);\r\n    \r\n    let orders = null;\r\n\r\n    orders = reducedCart.map((el, ind) => {\r\n        return <CartItem \r\n            name={el.name} \r\n            key={ind} \r\n            index={props.storeInv.findIndex(p => {return p.itemID === el.itemID})}\r\n            price={el.price}\r\n            img={el.imgURL}\r\n            id={el.itemID} \r\n            inStock={props.inStock}\r\n            removeAllofItem={props.removeAllofItem}\r\n            quantity={quantity[el.name]} \r\n            tempRemove={props.tempRemove} \r\n            tempAdd={props.tempAdd} />\r\n    });\r\n    \r\n    return orders;\r\n};\r\n \r\nexport default Cart;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport ContactForm from './ContactForm/ContactForm';\r\nimport Cart from '../../components/Cart/Cart';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport classes from './Checkout.module.css';\r\nimport * as action from '../../store/actions/index';\r\n\r\nconst Checkout = props => {\r\n    const storeInv = useSelector(state => state.onlineStore.storeInventory);\r\n    const cart = useSelector(state => state.onlineStore.cart);\r\n    const totalPrice = useSelector(state => state.onlineStore.totalPrice);\r\n    const stockedStatus = useSelector(state => state.onlineStore.inStockStatus);\r\n    const isAuthenticated = useSelector(state => state.auth.token !== null);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const addItemToCart = itemID => dispatch(action.addItemToCart(itemID));\r\n    const removeItemFromCart = itemID => dispatch(action.removeItemFromCart(itemID));\r\n    const removeAllOfThisItem = itemID => dispatch(action.removeAllOfItemType(itemID));\r\n    \r\n    if (cart.length === 0){\r\n        localStorage.removeItem('reducedCart');\r\n    }\r\n    \r\n    const cancelOrder = () => {\r\n        props.history.goBack();\r\n    }\r\n\r\n    const continueWithOrder = () => {\r\n        props.history.replace('/checkout/contact-form')\r\n    }\r\n\r\n    const proceedToSignUp = () => {   \r\n        props.history.push('/signup');\r\n    }\r\n\r\n    let orders = <Cart \r\n            cart={cart}\r\n            storeInv={storeInv}\r\n            inStock={stockedStatus}\r\n            removeAllofItem={removeAllOfThisItem}\r\n            tempRemove={removeItemFromCart} \r\n            tempAdd={addItemToCart} />\r\n\r\n    // No items = Empty Cart\r\n    let userOrder = <h3>Cart Empty</h3>\r\n    // Items in the cart, display orders\r\n    if (cart.length >= 1) {\r\n        userOrder = (\r\n            <>\r\n                {orders}   \r\n                <p className={classes.Total}>Your Total: <strong>${totalPrice}</strong></p>  \r\n                {isAuthenticated \r\n                    ?   <span>\r\n                        <Button \r\n                            btnType=\"Cancel\"\r\n                            clicked={cancelOrder}>CANCEL</Button>\r\n                        <Button \r\n                            btnType=\"Continue\"\r\n                            clicked={continueWithOrder}>CONTINUE</Button>\r\n                        </span>\r\n                    : <Button clicked={proceedToSignUp}>Sign up to continue</Button>\r\n                }\r\n            </>\r\n        )\r\n    }\r\n    return (\r\n        <section className={classes.Checkout}> \r\n            {userOrder}\r\n            <Route path={props.match.path + \"/contact-form\"}\r\n                render={(props)=>(\r\n                    <ContactForm \r\n                        price={totalPrice} {...props}/>)}/>                \r\n        </section>\r\n    )   \r\n}\r\n\r\nexport default Checkout;"],"sourceRoot":""}